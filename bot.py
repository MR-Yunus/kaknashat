from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
import requests
import logging

# ÿ•ÿπÿØÿßÿØÿßÿ™ ÿßŸÑÿ®Ÿàÿ™
TELEGRAM_TOKEN = '8183870944:AAGftaeglixiUoop3u9xAKQWcBYcULbtzzk'
ROADMAP_BASE_URL = "https://roadmap.sh/pdfs/roadmaps/"

# ÿßŸÑŸÇÿßÿ¶ŸÖÿ© ÿßŸÑŸÉÿßŸÖŸÑÿ© ŸÑŸÑŸÖÿ¨ÿßŸÑÿßÿ™ ÿßŸÑŸÖÿ™ÿßÿ≠ÿ©
AVAILABLE_ROADMAPS = {
    'absolute beginners': 'beginners.pdf',
    'web development': 'web-development.pdf',
    'frameworks': 'frameworks.pdf',
    'languages': 'languages-platforms.pdf',
    'devops': 'devops.pdf',
    'mobile': 'mobile-development.pdf',
    'databases': 'databases.pdf',
    'computer science': 'computer-science.pdf',
    'machine learning': 'machine-learning.pdf',
    'management': 'management.pdf',
    'game development': 'game-development.pdf',
    'design': 'design.pdf',
    'blockchain': 'blockchain.pdf',
    'cyber security': 'cyber-security.pdf',
    'frontend': 'frontend.pdf',
    'backend': 'backend.pdf',
    'full stack': 'full-stack.pdf',
    'api design': 'api-design.pdf',
    'qa': 'qa.pdf',
    'android': 'android.pdf',
    'ios': 'ios.pdf',
    'postgresql': 'postgresql.pdf',
    'software architect': 'software-architect.pdf',
    'technical writer': 'technical-writer.pdf',
    'devrel': 'devrel-engineer.pdf',
    'ai': 'ai-data-scientist.pdf',
    'ai engineer': 'ai-engineer.pdf',
    'ai agents': 'ai-agents.pdf',
    'data analyst': 'data-analyst.pdf',
    'mlops': 'mlops.pdf',
    'product manager': 'product-manager.pdf',
    'engineering manager': 'engineering-manager.pdf',
    'game dev': 'client-side-game-development.pdf',
    'server game dev': 'server-side-game-development.pdf',
    'ux design': 'ux-design.pdf',
    'graphql': 'graphql.pdf',
    'git': 'git-github.pdf',
    'react': 'react.pdf',
    'vue': 'vue.pdf',
    'angular': 'angular.pdf',
    'spring boot': 'spring-boot.pdf',
    'asp.net': 'aspnet-core.pdf',
    'javascript': 'javascript.pdf',
    'typescript': 'typescript.pdf',
    'node.js': 'nodejs.pdf',
    'php': 'php.pdf',
    'c++': 'cpp.pdf',
    'go': 'go.pdf',
    'rust': 'rust.pdf',
    'python': 'python.pdf',
    'java': 'java.pdf',
    'sql': 'sql.pdf',
    'docker': 'docker.pdf',
    'kubernetes': 'kubernetes.pdf',
    'aws': 'aws.pdf',
    'cloudflare': 'cloudflare.pdf',
    'linux': 'linux.pdf',
    'terraform': 'terraform.pdf',
    'react native': 'react-native.pdf',
    'flutter': 'flutter.pdf',
    'mongodb': 'mongodb.pdf',
    'redis': 'redis.pdf',
    'data structures': 'data-structures.pdf',
    'system design': 'system-design.pdf',
    'design architecture': 'design-and-architecture.pdf',
    'code review': 'code-review.pdf',
    'ai red teaming': 'ai-red-teaming.pdf',
    'prompt engineering': 'prompt-engineering.pdf',
    'design system': 'design-system.pdf'
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ŸÖÿπÿßŸÑÿ¨ÿ© ÿ£ŸÖÿ± /start"""
    categories = "\n".join([
        "üìå –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        "‚Ä¢ web development ‚Ä¢ devops ‚Ä¢ mobile ‚Ä¢ databases",
        "‚Ä¢ computer science ‚Ä¢ machine learning ‚Ä¢ design",
        "",
        "üë®‚Äçüíª –†–æ–ª–µ–≤—ã–µ –¥–æ—Ä–æ–∂–Ω—ã–µ –∫–∞—Ä—Ç—ã:",
        "‚Ä¢ frontend ‚Ä¢ backend ‚Ä¢ full stack ‚Ä¢ qa",
        "‚Ä¢ android ‚Ä¢ ios ‚Ä¢ software architect",
        "",
        "üõ† –ù–∞–≤—ã–∫–∏/—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:",
        "‚Ä¢ react ‚Ä¢ vue ‚Ä¢ angular ‚Ä¢ javascript ‚Ä¢ python",
        "‚Ä¢ java ‚Ä¢ docker ‚Ä¢ kubernetes ‚Ä¢ aws ‚Ä¢ linux",
        "",
        "‚ÑπÔ∏è –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫: /list"
    ])
    
    await update.message.reply_text(
        f"üìö –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–æ—Ä–æ–∂–Ω—ã—Ö –∫–∞—Ä—Ç!\n\n{categories}\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏–ª–∏ —Ä–æ–ª–∏"
    )

async def list_roadmaps(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ÿ•ÿ±ÿ≥ÿßŸÑ ŸÇÿßÿ¶ŸÖÿ© ŸÉÿßŸÖŸÑÿ© ÿ®ÿßŸÑŸÖÿ¨ÿßŸÑÿßÿ™"""
    roadmaps_list = "\n".join([f"‚Ä¢ {k}" for k in sorted(AVAILABLE_ROADMAPS.keys())])
    await update.message.reply_text(
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ—Ä–æ–∂–Ω—ã–µ –∫–∞—Ä—Ç—ã:\n\n" + roadmaps_list +
        "\n\n‚ÑπÔ∏è –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ, —Ç–∞–∫ –∏ —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è"
    )

async def send_roadmap(update: Update, context: ContextTypes.DEFAULT_TYPE, topic: str):
    """ÿ•ÿ±ÿ≥ÿßŸÑ ŸÖŸÑŸÅ PDF"""
    normalized_topic = topic.lower().strip()
    
    # ÿßŸÑÿ®ÿ≠ÿ´ ÿπŸÜ ÿ£ŸÅÿ∂ŸÑ ÿ™ÿ∑ÿßÿ®ŸÇ
    matched_topic = None
    for roadmap in AVAILABLE_ROADMAPS:
        if normalized_topic in roadmap or roadmap in normalized_topic:
            matched_topic = roadmap
            break
    
    if not matched_topic:
        await update.message.reply_text(
            "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Ä–æ–∂–Ω–æ–π –∫–∞—Ä—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ /list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"
        )
        return

    pdf_url = ROADMAP_BASE_URL + AVAILABLE_ROADMAPS[matched_topic]
    
    try:
        # ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ Ÿàÿ¨ŸàÿØ ÿßŸÑŸÖŸÑŸÅ
        response = requests.head(pdf_url)
        if response.status_code != 200:
            await update.message.reply_text(
                f"‚ö†Ô∏è –§–∞–π–ª –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n"
                f"–ò–ª–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ: {pdf_url}"
            )
            return
            
        await update.message.reply_document(
            document=pdf_url,
            caption=f"üìÑ –î–æ—Ä–æ–∂–Ω–∞—è –∫–∞—Ä—Ç–∞: {matched_topic.capitalize()}"
        )
    except Exception as e:
        logging.error(f"Error sending PDF: {e}")
        await update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ŸÖÿπÿßŸÑÿ¨ÿ© ÿßŸÑÿ±ÿ≥ÿßÿ¶ŸÑ ÿßŸÑŸÜÿµŸäÿ©"""
    topic = update.message.text
    await send_roadmap(update, context, topic)

async def map_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ŸÖÿπÿßŸÑÿ¨ÿ© ÿ£ŸÖÿ± /map"""
    if not context.args:
        await update.message.reply_text("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /map <–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏>\n–ü—Ä–∏–º–µ—Ä: /map react")
        return
    
    topic = " ".join(context.args)
    await send_roadmap(update, context, topic)

if __name__ == '__main__':
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("list", list_roadmaps))
    app.add_handler(CommandHandler("map", map_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    app.run_polling()
